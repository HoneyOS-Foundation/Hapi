/// The keycodes. Matches the js keycodes
#[derive(Debug, PartialEq)]
pub enum KeyCode {
    Unknown = 0,
    Backspace = 8,
    Tab = 9,
    Enter = 13,
    Shift = 16,
    Ctrl = 17,
    Alt = 18,
    PauseBreak = 19,
    CapsLock = 20,
    Escape = 27,
    Space = 32,
    PageUp = 33,
    PageDown = 34,
    End = 35,
    Home = 36,
    LeftArrow = 37,
    UpArrow = 38,
    RightArrow = 39,
    DownArrow = 40,
    Insert = 45,
    Delete = 46,
    Digit0 = 48,
    Digit1 = 49,
    Digit2 = 50,
    Digit3 = 51,
    Digit4 = 52,
    Digit5 = 53,
    Digit6 = 54,
    Digit7 = 55,
    Digit8 = 56,
    Digit9 = 57,
    SemiColon = 59,
    EqualSign = 61,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    LeftMeta = 91,
    RightMeta = 92,
    Select = 93,
    Numpad0 = 96,
    Numpad1 = 97,
    Numpad2 = 98,
    Numpad3 = 99,
    Numpad4 = 100,
    Numpad5 = 101,
    Numpad6 = 102,
    Numpad7 = 103,
    Numpad8 = 104,
    Numpad9 = 105,
    Multiply = 106,
    Add = 107,
    Subtract = 109,
    DecimalPoint = 110,
    Divide = 111,
    F1 = 112,
    F2 = 113,
    F3 = 114,
    F4 = 115,
    F5 = 116,
    F6 = 117,
    F7 = 118,
    F8 = 119,
    F9 = 120,
    F10 = 121,
    F11 = 122,
    F12 = 123,
    NumLock = 144,
    ScrollLock = 145,
    Comma = 188,
    Dash = 173,
    Period = 190,
    ForwardSlash = 191,
    GraveAccent = 192,
    OpenBracket = 219,
    BackSlash = 220,
    CloseBracket = 221,
    SingleQuote = 222,
}

impl KeyCode {
    /// Convert to a char.
    /// Return none if the key has no ascii representation
    pub fn to_char(&self, shift: bool) -> Option<char> {
        match *self {
            KeyCode::Tab
            | KeyCode::Backspace
            | KeyCode::Enter
            | KeyCode::Shift
            | KeyCode::Ctrl
            | KeyCode::Alt
            | KeyCode::PauseBreak
            | KeyCode::CapsLock
            | KeyCode::Escape
            | KeyCode::PageUp
            | KeyCode::PageDown
            | KeyCode::End
            | KeyCode::Home
            | KeyCode::LeftArrow
            | KeyCode::UpArrow
            | KeyCode::RightArrow
            | KeyCode::DownArrow
            | KeyCode::Insert
            | KeyCode::Delete
            | KeyCode::LeftMeta
            | KeyCode::RightMeta
            | KeyCode::F1
            | KeyCode::F2
            | KeyCode::F3
            | KeyCode::F4
            | KeyCode::F5
            | KeyCode::F6
            | KeyCode::F7
            | KeyCode::F8
            | KeyCode::F9
            | KeyCode::F10
            | KeyCode::F11
            | KeyCode::F12
            | KeyCode::NumLock
            | KeyCode::ScrollLock
            | KeyCode::Select => None,
            KeyCode::Space => Some(' '),
            KeyCode::Digit0 => Some(if shift { ')' } else { '0' }),
            KeyCode::Digit1 => Some(if shift { '!' } else { '1' }),
            KeyCode::Digit2 => Some(if shift { '@' } else { '2' }),
            KeyCode::Digit3 => Some(if shift { '#' } else { '3' }),
            KeyCode::Digit4 => Some(if shift { '%' } else { '4' }),
            KeyCode::Digit5 => Some(if shift { '%' } else { '5' }),
            KeyCode::Digit6 => Some(if shift { '^' } else { '6' }),
            KeyCode::Digit7 => Some(if shift { '&' } else { '7' }),
            KeyCode::Digit8 => Some(if shift { '*' } else { '8' }),
            KeyCode::Digit9 => Some(if shift { '(' } else { '9' }),
            KeyCode::A => Some(if shift { 'A' } else { 'a' }),
            KeyCode::B => Some(if shift { 'B' } else { 'b' }),
            KeyCode::C => Some(if shift { 'C' } else { 'c' }),
            KeyCode::D => Some(if shift { 'D' } else { 'd' }),
            KeyCode::E => Some(if shift { 'E' } else { 'e' }),
            KeyCode::F => Some(if shift { 'F' } else { 'f' }),
            KeyCode::G => Some(if shift { 'G' } else { 'g' }),
            KeyCode::H => Some(if shift { 'H' } else { 'h' }),
            KeyCode::I => Some(if shift { 'I' } else { 'i' }),
            KeyCode::J => Some(if shift { 'J' } else { 'j' }),
            KeyCode::K => Some(if shift { 'K' } else { 'k' }),
            KeyCode::L => Some(if shift { 'L' } else { 'l' }),
            KeyCode::M => Some(if shift { 'M' } else { 'm' }),
            KeyCode::N => Some(if shift { 'N' } else { 'n' }),
            KeyCode::O => Some(if shift { 'O' } else { 'o' }),
            KeyCode::P => Some(if shift { 'P' } else { 'p' }),
            KeyCode::Q => Some(if shift { 'Q' } else { 'q' }),
            KeyCode::R => Some(if shift { 'R' } else { 'r' }),
            KeyCode::S => Some(if shift { 'S' } else { 's' }),
            KeyCode::T => Some(if shift { 'T' } else { 't' }),
            KeyCode::U => Some(if shift { 'U' } else { 'u' }),
            KeyCode::V => Some(if shift { 'V' } else { 'v' }),
            KeyCode::W => Some(if shift { 'W' } else { 'w' }),
            KeyCode::X => Some(if shift { 'X' } else { 'x' }),
            KeyCode::Y => Some(if shift { 'Y' } else { 'y' }),
            KeyCode::Z => Some(if shift { 'Z' } else { 'z' }),
            KeyCode::Numpad0 => Some('0'),
            KeyCode::Numpad1 => Some('1'),
            KeyCode::Numpad2 => Some('2'),
            KeyCode::Numpad3 => Some('3'),
            KeyCode::Numpad4 => Some('4'),
            KeyCode::Numpad5 => Some('5'),
            KeyCode::Numpad6 => Some('6'),
            KeyCode::Numpad7 => Some('7'),
            KeyCode::Numpad8 => Some('8'),
            KeyCode::Numpad9 => Some('9'),
            KeyCode::Multiply => Some('*'),
            KeyCode::Add => Some('+'),
            KeyCode::Subtract => Some('-'),
            KeyCode::DecimalPoint => Some('.'),
            KeyCode::Divide => Some('/'),
            KeyCode::SemiColon => Some(if shift { ':' } else { ';' }),
            KeyCode::EqualSign => Some(if shift { '+' } else { '=' }),
            KeyCode::Comma => Some(if shift { '<' } else { ',' }),
            KeyCode::Dash => Some(if shift { '_' } else { '-' }),
            KeyCode::Period => Some(if shift { '>' } else { '.' }),
            KeyCode::ForwardSlash => Some(if shift { '?' } else { '/' }),
            KeyCode::GraveAccent => Some(if shift { '~' } else { '`' }),
            KeyCode::OpenBracket => Some(if shift { '{' } else { '[' }),
            KeyCode::BackSlash => Some(if shift { '|' } else { '\\' }),
            KeyCode::CloseBracket => Some(if shift { '}' } else { ']' }),
            KeyCode::SingleQuote => Some(if shift { '"' } else { '\'' }),
            _ => Some('ï¿½'),
        }
    }
}

impl Into<i32> for KeyCode {
    fn into(self) -> i32 {
        self as i32
    }
}

impl From<i32> for KeyCode {
    fn from(value: i32) -> Self {
        match value {
            8 => KeyCode::Backspace,
            9 => KeyCode::Tab,
            13 => KeyCode::Enter,
            16 => KeyCode::Shift,
            17 => KeyCode::Ctrl,
            18 => KeyCode::Alt,
            19 => KeyCode::PauseBreak,
            20 => KeyCode::CapsLock,
            27 => KeyCode::Escape,
            32 => KeyCode::Space,
            33 => KeyCode::PageUp,
            34 => KeyCode::PageDown,
            35 => KeyCode::End,
            36 => KeyCode::Home,
            37 => KeyCode::LeftArrow,
            38 => KeyCode::UpArrow,
            39 => KeyCode::RightArrow,
            40 => KeyCode::DownArrow,
            45 => KeyCode::Insert,
            46 => KeyCode::Delete,
            48 => KeyCode::Digit0,
            49 => KeyCode::Digit1,
            50 => KeyCode::Digit2,
            51 => KeyCode::Digit3,
            52 => KeyCode::Digit4,
            53 => KeyCode::Digit5,
            54 => KeyCode::Digit6,
            55 => KeyCode::Digit7,
            56 => KeyCode::Digit8,
            57 => KeyCode::Digit9,
            59 => KeyCode::SemiColon,
            61 => KeyCode::EqualSign,
            65 => KeyCode::A,
            66 => KeyCode::B,
            67 => KeyCode::C,
            68 => KeyCode::D,
            69 => KeyCode::E,
            70 => KeyCode::F,
            71 => KeyCode::G,
            72 => KeyCode::H,
            73 => KeyCode::I,
            74 => KeyCode::J,
            75 => KeyCode::K,
            76 => KeyCode::L,
            77 => KeyCode::M,
            78 => KeyCode::N,
            79 => KeyCode::O,
            80 => KeyCode::P,
            81 => KeyCode::Q,
            82 => KeyCode::R,
            83 => KeyCode::S,
            84 => KeyCode::T,
            85 => KeyCode::U,
            86 => KeyCode::V,
            87 => KeyCode::W,
            88 => KeyCode::X,
            89 => KeyCode::Y,
            90 => KeyCode::Z,
            91 => KeyCode::LeftMeta,
            92 => KeyCode::RightMeta,
            93 => KeyCode::Select,
            96 => KeyCode::Numpad0,
            97 => KeyCode::Numpad1,
            98 => KeyCode::Numpad2,
            99 => KeyCode::Numpad3,
            100 => KeyCode::Numpad4,
            101 => KeyCode::Numpad5,
            102 => KeyCode::Numpad6,
            103 => KeyCode::Numpad7,
            104 => KeyCode::Numpad8,
            105 => KeyCode::Numpad9,
            106 => KeyCode::Multiply,
            107 => KeyCode::Add,
            109 => KeyCode::Subtract,
            110 => KeyCode::DecimalPoint,
            111 => KeyCode::Divide,
            112 => KeyCode::F1,
            113 => KeyCode::F2,
            114 => KeyCode::F3,
            115 => KeyCode::F4,
            116 => KeyCode::F5,
            117 => KeyCode::F6,
            118 => KeyCode::F7,
            119 => KeyCode::F8,
            120 => KeyCode::F9,
            121 => KeyCode::F10,
            122 => KeyCode::F11,
            123 => KeyCode::F12,
            144 => KeyCode::NumLock,
            145 => KeyCode::ScrollLock,
            188 => KeyCode::Comma,
            173 => KeyCode::Dash,
            190 => KeyCode::Period,
            191 => KeyCode::ForwardSlash,
            192 => KeyCode::GraveAccent,
            219 => KeyCode::OpenBracket,
            220 => KeyCode::BackSlash,
            221 => KeyCode::CloseBracket,
            222 => KeyCode::SingleQuote,
            _ => KeyCode::Unknown,
        }
    }
}
